/*
 * EvoContacts
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using EvoContacts.ApplicationCore.Enums;
using EvoContacts.ApplicationCore.Interfaces;
using EvoContacts.ApplicationCore.Models;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Newtonsoft.Json;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Net;
using System.Threading.Tasks;

namespace EvoContacts.API.Controllers
{
    /// <summary>
    /// Contains endpoints used to manage Contacts
    /// </summary>
    [Produces("application/json")]
    public class ContactsController : Controller
    {
        private readonly IContactService _contactService;
        private readonly ILogger<ContactsController> _logger;

        public ContactsController(
            IContactService contactService,
            ILogger<ContactsController> logger) : base()
        {
            _contactService = contactService;
            _logger = logger;
        }

        #region CONTACTS

        /// <summary>
        /// Gets a paged List of Contacts
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="page">The page number to return.</param>
        /// <param name="pageSize">The maximum number of records to return per page.</param>
        /// <response code="200"></response>
        [HttpGet]
        [Route("/contacts")]
        [SwaggerOperation("GetContacts")]
        [ProducesResponseType(statusCode: 200, type: typeof(PagedListResult<Contact>))]
        public async Task<IActionResult> GetContacts([FromQuery]int page = 1, [FromQuery]int pageSize = 20)
        {
            var contactsResult = await _contactService.GetPagedContacts(page, pageSize);

            if (contactsResult.RequestFailed)
            {
                return BadRequest(contactsResult.ErrorMessage);
            }

            return Ok(contactsResult);
        }

        /// <summary>
        /// Gets a specific Contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="contactId"></param>
        /// <response code="200"></response>
        /// <response code="401"></response>
        /// <response code="404"></response>
        [HttpGet]
        [Route("/contacts/{contactId}")]
        [SwaggerOperation("GetContact")]
        [ProducesResponseType(statusCode: 200, type: typeof(Result<Contact>))]
        public async Task<IActionResult> GetContact([FromRoute]Guid contactId)
        {
            var contactResult = await _contactService.GetContact(contactId);

            if (contactResult.RequestFailed)
            {
                return BadRequest(contactResult.ErrorMessage);
            }
            else if (contactResult.Data == null)
            {
                return NotFound();
            }
            else
            {
                return Ok(contactResult);
            }
        }

        /// <summary>
        /// Creates a new Contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="contactCreate"></param>
        /// <response code="201"></response>
        /// <response code="400"></response>
        /// <response code="401"></response>
        [HttpPost]
        [Route("/contacts")]
        [SwaggerOperation("CreateContact")]
        [ProducesResponseType(statusCode: 201, type: typeof(Result<Contact>))]
        public async Task<IActionResult> CreateContact([FromBody]ContactCreate contactCreate)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var contactResult = await _contactService.CreateContact(contactCreate);

            if (contactResult.RequestFailed)
            {
                return BadRequest(contactResult.ErrorMessage);
            }
            else if (contactResult.Data == null)
            {
                return NotFound();
            }
            else
            {
                var contactId = contactResult.Data.Id;

                return Created(string.Format($"/contacts/{contactId}"), contactResult.Data);
            }
        }

        /// <summary>
        /// Updates a specific Contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="contactId"></param>
        /// <param name="contactUpdate"></param>
        /// <response code="200"></response>
        /// <response code="400"></response>
        /// <response code="401"></response>
        /// <response code="404"></response>
        [HttpPut]
        [Route("/contacts/{contactId}")]
        [SwaggerOperation("UpdateContact")]
        [ProducesResponseType(statusCode: 200)]
        public async Task<IActionResult> UpdateContact([FromRoute]Guid contactId, [FromBody]ContactUpdate contactUpdate)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            contactUpdate.Id = contactId;

            var updateResult = await _contactService.UpdateContact(contactUpdate);

            if (updateResult.RequestFailed)
            {
                return BadRequest(updateResult.ErrorMessage);
            }
            else if (updateResult.Data.Value)
            {
                return Ok();
            }
            else //if (!deleteResult.Data.Value)
            {
                return NotFound();
            }
        }

        /// <summary>
        /// Updates a specific Contact's ContactStatus
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="contactId"></param>
        /// <param name="contactUpdateStatus"></param>
        /// <response code="200"></response>
        /// <response code="400"></response>
        /// <response code="401"></response>
        /// <response code="404"></response>
        [HttpPatch]
        [Route("/contacts/{contactId}/updateStatus")]
        [SwaggerOperation("UpdateContactStatus")]
        [ProducesResponseType(statusCode: 200)]
        public async Task<IActionResult> UpdateContactStatus([FromRoute]Guid contactId, [FromBody]ContactUpdateStatus contactUpdateStatus)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            contactUpdateStatus.Id = contactId;

            var updateStatusResult = await _contactService.UpdateContactStatus(contactUpdateStatus);

            if (updateStatusResult.RequestFailed)
            {
                return BadRequest(updateStatusResult.ErrorMessage);
            }
            else if (updateStatusResult.Data.Value)
            {
                return Ok();
            }
            else //if (!updateStatusResult.Data.Value)
            {
                return NotFound();
            }
        }

        /// <summary>
        /// Deletes a specific Contact
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="contactId"></param>
        /// <response code="204"></response>
        /// <response code="401"></response>
        /// <response code="404"></response>
        [HttpDelete]
        [Route("/contacts/{contactId}")]
        [SwaggerOperation("DeleteContact")]
        [ProducesResponseType(statusCode: 204)]
        public async Task<IActionResult> DeleteContact([FromRoute]Guid contactId)
        {
            //TBC: Must add ClaimsUser claimsUser
            var deletedUserId = Guid.NewGuid();

            var deleteResult = await _contactService.DeleteContact(contactId, deletedUserId);

            if (deleteResult.RequestFailed)
            {
                return BadRequest(deleteResult.ErrorMessage);
            }
            else if (deleteResult.Data.Value)
            {
                return NoContent();
            }
            else //if (!deleteResult.Data.Value)
            {
                return NotFound();
            }
        }

        #endregion

    }
}
